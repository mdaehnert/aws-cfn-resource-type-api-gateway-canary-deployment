AWSTemplateFormatVersion: 2010-09-09
Description: serverless example
Resources:
  Function:
    Type: "AWS::Lambda::Function"
    Properties:
      TracingConfig:
        Mode: "Active"
      Code:
        ZipFile: |
          import json
          
          def handler(event, context):
            return {
                "statusCode": 200,
                "body": json.dumps("Hello from Lambda")
            }
      Description: "main handler"
      MemorySize: 128
      Handler: "index.handler"
      Role: !GetAtt FunctionRole.Arn
      Timeout: 5
      Runtime: "python3.7"
  FunctionRootPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      FunctionName: !Ref FunctionVersion1
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessRestApi}/*/GET/"
  Deployment1:
    DependsOn: FunctionRootPermission
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: "Deployment"
  FunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
  FunctionVersion1:
    DeletionPolicy: Retain
    Type: "AWS::Lambda::Version"
    Properties:
      FunctionName: !Ref Function
  ServerlessRestApiBlueGreenStage:
    Type: "SPRT::ApiGateway::Deployment"
    Properties:
      DeploymentId: !Ref Deployment1
      TracingEnabled: true
      RestApiId: !Ref ServerlessRestApi
      CanaryPercentage: 50
      GreenTestStateMachineArn: !Ref TestStateMachine
  ServerlessRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Body:
        info:
          version: "1.0"
          title: !Ref AWS::StackName
        paths:
          '/':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionVersion1}/invocations
              responses: {}
        openapi: 3.0.1
        x-amazon-apigateway-gateway-responses:
          MISSING_AUTHENTICATION_TOKEN:
            responseParameters: {}
            responseTemplates:
              application/*: '{ "message": ?Not found" }'
            statusCode: "404"
      EndpointConfiguration:
        Types:
        - REGIONAL
      Parameters:
        endpointConfigurationTypes: REGIONAL
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${Function}"
  TestFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      TracingConfig:
        Mode: "Active"
      Code:
        ZipFile: !Sub |
          from urllib import request

          def handler(event, context):
            with request.urlopen("https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/green") as response:
              payload = response.read().decode()
            print(payload)
            if payload == '"Hello from Lambda 2"':
              return {
                "status": "SUCCESS"
              }
            else:
              raise ValueError()
      Description: "main handler"
      MemorySize: 128
      Handler: "index.handler"
      Role: !GetAtt FunctionRole.Arn
      Timeout: 5
      Runtime: "python3.7"
  TestFunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${TestFunction}"
  TestStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "Test GET on root",
          "States": {
            "Test GET on root": {
              "Type": "Task",
              "Resource": "${TestFunction.Arn}",
              "ResultPath": "$.TaskResult",
              "TimeoutSeconds": 5,
              "End": true
            }
          },
          "TimeoutSeconds": 10
        }
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: TestInvoke
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - !GetAtt TestFunction.Arn